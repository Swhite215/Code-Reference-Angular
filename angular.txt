Angular Fundamentals
    1. What is Angular?
        a. Framework
            - Allows for the creation of reactive Single-Page-Applications (SPA)
        b. Versions Angular 1  - Angular 2 - Angular 7
            - Angular 1 is old, Angular 2 is a rewrite, Angular 7 is robust tool set
    2. Angular CLI
        a. Overview
            - CLI for building projects
        b. Commands
            - ng new name
            - ng serve
            - ng generate c components/name
            - ng generate d directives/name
            - ng generate s services/name
    3. Components & Data Bindings
        a. @Component
            - selector = html binding name, app-name, .class, #id, [attribute]
            - template = html file or direct html
            - styleUrls = array of stylesheets
            - styles - array of style strings
            - encapsulation: ViewEncapsulation.Native or .None or .Emulated (default)
        b. Databinding
            - Communication between TypeScript code and Template
            - String Interpolation
                - {{ data }}
            - Property Binding
                - [property]="data"
            - Event Binding
                - (event)="method"
                - (event)="method($event = data)"
                - in component method
                    - (<HTMLInputElement>event.target).value
            - Two Way Binding
                - [(ngMode)]="data"
            - Custom Properties
                - *ngFor="let data of array"
                - Loop Level, [property]="data"
                - Receiving Component
                    - import { Input} from "@angular/core
                    - @Input() property: type;
                - Alias
                    - [alias]="data"
                    - @Input('alias')
            - Reference
                - #name
                - (event)="method(name)"
                - in component
                    - import { ViewChild, ElementRef} from "@angular/core
                    - @ViewChild('reference', component) name: ElementRef 
                    - name.nativeElement = element w/ .value
            - @ContentChild
                - @ContentChild('reference) name: ElementRef
        c. Communicating Upward
            - Parent Component Template
                - (emittedEvent)="parentMethod($event)"
            - Child Component
                - import { Output, EventEmitter } from "@angular/core"
                - @Output() emittedEvent = new EventEmitter<{}>()
                - childMethod() {this.emittedEvent.emit({})}
            - Alias
                - Parent (alias)="parentMethod($event)
                - Child @Output('alias')
        d.  Ng Content
            - Everything in between <component>LOST CONTENT</component>
        e. Component Lifecycle
            - Set-Up
                - export class name implements lifecycle method - ng
            - Order
                - ngOnChanges, called after a bound input property changes
                - ngOnInit, called after initialization
                - ngDoCheck, called every change detection run
                - ngAfterContentInit, called after content (ng-content) has been projected into view
                - ngAfterContentChecked, called every time the projected content has been checked
                - ngAfterViewInit, called after the component's view (and child views) has been initialized
                - ngAfterViewChecked, called every time the view (and child views) have been checked
                - ngOnDestroy, called once the component is about to be destroyed
    4. Directives
        a. What is a directive?
            - Directives are instructions in the DOM
        b. Types
            - Components
                - <app-name></app-name>
            - Structural
                -ngIf, dynamically render content
                    - *ngIf="boolean expression"
                    - *ngIf="boolean expression; else name" with <ng-template #name><p>CONTENT</p></ng-template>
                -ngFor, dynamically render multiple components
                    - *ngFor="let something of array"
                    - *ngFor="let something of array; let i = index"
                - <ng-content></ng-content>
                - ngSwitch
                    - [ngSwitch]="valueToCheck"
                    - <p *ngSwitchCase="possibleValue">This possibleValue</p>
                    - <p *ngSwitchDefault>Default Value</p>
            - Attribute
                - [(ngModel)]="stateValue"
                - ngStyle, dynamically apply styles
                    - [ngStyle]="{styleName: 'value' | method() | condition}"
                - ngClass, dynamically apply classes
                    - [ngClass]="{className: boolean expression}", or function that returns object
            - Creating a basic attribute directive
                - @Directive({ selector: value})
                - export class NameOfDirective implements OnInit{ }
                - constructor(private elementRef: ElementRef) {}
                - ngOnInit() {this.elementRef.nativeElement.style.styleName = value}
                - add NameOfDirective to module declarations
            - Host Listener
                - import
                - @HostListener('event') method(eventData: Event) { //code }
            - Host Binding
                - @HostBinding('style.property') property: string;
                - this.property = value;
                - Can add @Input name: string = initialValue
                - On component template [name]="value"
                - this.property = name
            - Creating a structural directive
                - @Directive({ selector: value})
                - export class StructuralDirective{ }
                - @Input() set value(condition: boolean) { this.vcRef.createEmbeddedView(this.templateRef);}
                - constructor(private templateRef: TemplateRef, private vcRef: ViewContainerRef) {}
                - *selector
    5. Services & Dependency Injection
        a. Why would you need services?
            - Communication between components
            - Requests to APIs
            - Store and manage data
        b. Setup
            - export class SomethingService { method()}
            - Component
                - import { SomethingService } from "services/something.service"
                - constructor(private somethingService: SomethingService){}
                - @Component({ providers: [SomethingService]})
                - this.somethingService.method()
        c. Hierarchial Injector
            - AppModule, Service is available application wide
                - Option #1: @NgModule){ providers: [SomethingService]}
                - Option #2: @Injectable({ providedIn: 'root}) within SomethingService
            - AppComponent, Service is passed down to all child components of a component
            - Component w/ no children, Service is just avaiable for this component
            - @Injectable service where you are injecting another service
        d. Cross Component Communication
            - method = new EventEmitter<type>()
            - In Component with SomethingService
                - this.somethingService.method.emit()
            - In Component with SomethingService where you want to listen
                - this.somethingService.method.subscribe(callback)
    6. Routing
        a. Why do we need a router?
            - To maintain a SPA over multiple pages of different content
        b. Setting up the router
            - import { Routes, RouterModule } from "@angular/core;
            - const appRoutes: Routes = [{path: 'path', component: SomeViewComponent}, {path: '', component: HomeViewComponent} ]
            - @NgModule( imports: [RouterModule.forRoot(appRoutes)])
            - <router-outlet></router-outlet> directive, where you want your content to render
            - <a routerLink="path">Path Name</a>
        c. Navigation Paths
            - "/absolute", "relative", "../path"
        d. Styling Active Router Links
            - <a routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}">Path</a>
        e. Navigating Programmatically
            - Absolute Paths
                - import { Router} from "@angular/router
                - constructor(private router: Router) {}
                - method() { this.router.navigate(["/absolute"])}
            - Relative Paths
                - import { Router, ActivatedRoute} from "@angular/router
                - constructor(private router: Router, private route: ActivatedRoute) {}
                - method() { this.router.navigate(["relative"], { relativeTo: this.route })}
        f. Passing Parameters to Routes
            - const appRoutes: Routes = [{path: 'path/:dynamicVariable', component: SomeViewComponent} ]
        g. Fetching Route Parameters
            - dynamicVariable: {id: number, name: string};
            - import { ActivatedRoute, Params} from "@angular/router
            - constructor(private route: ActivatedRoute) {}
            - ngOnInit() {this.dynamicVariable = { id: this.route.snapshot.params["id"], name: this.route.snapshot.params["name"] }}
        h. Fetching Data Reactively
            - Link on component that is already rendered doesn't re-instantiate the component
            - this.route.params.subscribe(params: Params => {
                this.user.id = params['id'];
                this.user.name = params['name'];
            })
        i. Query Parameters and Fragments
            - <a routerLinkActive="active" [queryParams]="{param: value}" [fragment]="value" [routerLinkActiveOptions]="{exact: true}">Path</a>
            - method() { this.router.navigate(["relative"], { queryParams: {param: value}, "fragment": "value" })}
            - ngOnInit() {this.dynamicVariable = { queryParams: this.route.snapshot.queryParams, fragment: this.route.snapshot.fragment }}
            - this.route.queryParams.subscribe(callback)
            - this.route.fragment.subscribe(callback)
            - Preserving Query Parameters
                - method() { this.router.navigate(["relative"], { relativeTo: this.route, queryParamsHandling: "merge" | "preserve" })}
        j. Nested Routing
            - const appRoutes: Routes = [{path: 'path', component: SomeViewComponent, children: [{path: ":value", components: SomeViewComponent}]} ]
            - Parent component HTML, <router-outlet></router-outlet>
        k. Redirecting and Wild Card Routes
            - const appRoutes: Routes = [{path: '/404', component: PageNotFoundComponent}, {path: '**', redirectTo: "/404"} ]
        l. app-routing.module.ts
            - import { Routes, RouterModule} from "@angular/router"
            - import { NgModule} from "@angular/core
            - const appRoutes:Routes = [{path: "path", component: SomeViewComponent}]
            - @NgModule({imports: [RouterModule.forRoot(appRoutes)], exports: [RouterModule]})
            - export class AppRoutingModule {}
            - in AppModule
                - import { AppRoutingModule} from "app-routing.module.ts"
                - NgModule({imports: [AppRoutingModule]})
        m. Guards and canActivate
            - auth-guard.service.ts
                - import { CanActivate ActivatedRouterSnapShot, RouterStateSnapshot, Router} from "@angular/router"
                - import { Observable} from "rxjs";
                - import { Injectable} from "@angular/core;
                - import { AuthService} from "auth.service.ts";
                - @Injectable()
                - export class AuthGuard implements CanActivate {
                    - constructor(private authService: AuthService, private router: Router)
                    -canActivate(route: ActivatedRouterSnapShot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
                        return this.authService.isAuthenticated().then((authenticated: boolean) => {
                            if (authenticated) {
                                return true;
                            } else {
                                this.router.navigate(["/]);
                            }
                        })
                    }
                    - canActivateChild() {}, same as above
                }
            - auth.service.ts
                - export class AuthService {
                    loggedIn = false;

                    isAuthenticated() {
                        const promise = new Promise((resolve, reject) => {
                            setTimeout(() => {
                                resolve(this.loggedIn);
                            }, 1000)
                        });
                        return promise;
                    }
                    login() {
                        this.loggedIn = true;
                    }
                    logout() {
                        this.loggedIn = false;
                    }
                }
            - app-routing.module.ts
                - {path: "path", canActivate[AuthGuard], component: SomeViewComponent}
                - {path: "path", canActivateChild[AuthGuard], component: SomeViewComponent}
            - AppModule
                - @NgModule({providers: [AuthGuard, AuthService]})
        n. canDeactivate
            - can-deativate-guard.service.ts
                - import { Observable} from "rxjs";
                - import { CanDeactivate, ActivatedRouterSnapShot, RouterStateSnapShot} from "@angular/router"
                - export interface CanComponentDeactivate {
                    canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean
                }
                - export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
                    canDeactivate(component: CanComponentDeactivate, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapShot, nextState?: RouterStateSnapShot) {
                        return component.canDeactivate();
                    }
                }
            - app-routing.module.ts
                - {path: "path", component: SomeViewComponent, canDeactivate: [CanDeactivateGuard]}
            - @NgModule({
                providers: [CanDeactivateGuard]
            })
            - SomeViewComponent
                - import { CanComponentDeactivate} from "can-deactivate-guard.service.ts";
                - canDeactivate(): Observable<boolean> | Promise<boolean> | boolean {
                    if (!this.allowEdit) {
                        return true;
                    }

                    if ((this.serverName !== this.server.name || this.serverStatus !== this.server.status) && !this.changesSaved) {
                        return confirm("Do you want to discard the changes?");
                    } else {
                        return true;
                    }
                }
        o. Passing Static Data to a Route
            - Passing Data, {path: "path", component: SomeViewComponent, data: {message: "This page does not exists."}}
            - Retrieving Data, constructor(private route: ActivatedRoute) {}
                - this.errorMessage = this.route.snapshot.data['message'];
                - this.route.data.subscribe(data: Data => this.errorMessage = data['message]);
        p. Resolving Dynamic data with Resolve Guard
            - server-resolver.service.ts
                - import { Observabe} from "rxjs";
                - import { Resolve, ActivatedRouteSnapshot, RouterStateSnapShot} from "@angular/router"
                - iport { Injectable} from "@angular/core"
                - import { TypeService} from "type.service.ts"
                - @Injectable()
                - constructor(private typeService: TypeService) {}
                - export class ServerResolver implements Resolve<type> {
                    resolve(route:ActivatedRouteSnapshot, state: RouterStateSnapShot): Observable<type> | Promise<type> | type {
                        return this.typeService.getType(+route.params['id']);
                    }
                }
            - app.module.ts
                - @NgModule({ providers: [ServerResolver]});
            - app-routing.module.ts
                - { path: "path", component: SomeViewComponent, resolve: {property: ServerResolver}}
            - type.component.ts
                - ngOnInit() {
                    this.route.data.subscribe((data: Data) => {
                        this.type = data['resolve object property']
                    });
                }
    7. Observables
    8. Forms
    9. Pipes
    10. HTTP
    11. Authentication
    12. Optimizations & NgModules
    13. Deployment
    14. Animations and Testing
    15. Typescript
        